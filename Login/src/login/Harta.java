/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package login;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import login.OIA;

/**
 *
 * @author Razvan
 */
public class Harta extends javax.swing.JFrame {
    static BufferedImage img;
    

    /**
     * Creates new form Harta
     */
   String adresa="";
    
    String zoom="17";
    ImageIcon imagine=new ImageIcon();
    public Harta(String address) throws Exception {
        initComponents();
        System.setProperty("java.net.useSystemProxies", "true");
        this.adresa= address;
      
     
     
      String latLongs[] = getLatLongPositions(adresa+",Bucuresti");
      System.out.println("adresa "+adresa);
      

try {
String latitude = latLongs[0];
String longitude = latLongs[1];
String imageUrl = "https://maps.googleapis.com/maps/api/staticmap?markers="
+ latitude
+ ","
+ longitude
+ "&zoom="+zoom+"&size=500x500&scale=2&maptype=roadmap";
String destinationFile = "image.jpg";
// read the map image from Google
// then save it to a local file: image.jpg
//
URL url = new URL(imageUrl);
InputStream is = url.openStream();
OutputStream os = new FileOutputStream(destinationFile);
byte[] b = new byte[2048];
int length;
while ((length = is.read(b)) != -1) {
os.write(b, 0, length);
}
is.close();
os.close();
} catch (IOException e) {
e.printStackTrace();
System.exit(1);
}
// create a GUI component that loads the image: image.jpg
//
ImageIcon imageIcon = new ImageIcon((new ImageIcon("image.jpg"))
        
.getImage().getScaledInstance(500, 500,
java.awt.Image.SCALE_SMOOTH));


imagine=imageIcon;
jLabel1.setIcon(imageIcon);
this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
this.setVisible(true);
this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
    }
    public  String[] getLatLongPositions(String address) throws Exception
  {
    int responseCode = 0;
    String api = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + URLEncoder.encode(address, "UTF-8") + "&sensor=true";
    URL url = new URL(api);
    HttpURLConnection httpConnection = (HttpURLConnection)url.openConnection();
    httpConnection.connect();
    responseCode = httpConnection.getResponseCode();
    if(responseCode == 200)
    {
      DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();;
      Document document = builder.parse(httpConnection.getInputStream());
      XPathFactory xPathfactory = XPathFactory.newInstance();
      XPath xpath = xPathfactory.newXPath();
      XPathExpression expr = xpath.compile("/GeocodeResponse/status");
      String status = (String)expr.evaluate(document, XPathConstants.STRING);
      if(status.equals("OK"))
      {
         expr = xpath.compile("//geometry/location/lat");
         String latitude = (String)expr.evaluate(document, XPathConstants.STRING);
         expr = xpath.compile("//geometry/location/lng");
         String longitude = (String)expr.evaluate(document, XPathConstants.STRING);
          System.out.println(latitude);
          httpConnection.disconnect();
          builder.reset();
          xpath.reset();
          expr=null;
          status=null;
         return new String[] {latitude, longitude};
          
      }
      else
      {
         throw new Exception("Error from the API - response status: "+status);
      }
    }
    return null;
  }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ZoomOutButton = new javax.swing.JButton();
        ZoomInButton = new javax.swing.JButton();
        SalveazaHartaButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ZoomOutButton.setText("ZoomOut");
        ZoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomOutButtonActionPerformed(evt);
            }
        });

        ZoomInButton.setText("ZoomIn");
        ZoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomInButtonActionPerformed(evt);
            }
        });

        SalveazaHartaButton.setText("SalveazaHarta");
        SalveazaHartaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalveazaHartaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ZoomOutButton)
                        .addGap(97, 97, 97)
                        .addComponent(ZoomInButton)
                        .addGap(128, 128, 128)
                        .addComponent(SalveazaHartaButton)))
                .addContainerGap(1393, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SalveazaHartaButton)
                    .addComponent(ZoomInButton)
                    .addComponent(ZoomOutButton))
                .addContainerGap(459, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ZoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomOutButtonActionPerformed
try {                                              
    // TODO add your handling code here:
    Integer i=(Integer.parseInt(zoom));
    i--;
    zoom=String.valueOf(i);
    System.setProperty("java.net.useSystemProxies", "true");
    
    
    
    String latLongs[] = getLatLongPositions(adresa+",Bucuresti");
    
    
    try {
        String latitude = latLongs[0];
        String longitude = latLongs[1];
        String imageUrl = "https://maps.googleapis.com/maps/api/staticmap?markers="
                + latitude
                + ","
                + longitude
                + "&zoom="+zoom+"&size=500x500&scale=2&maptype=roadmap";
        String destinationFile = "image.jpg";
// read the map image from Google
// then save it to a local file: image.jpg
//
URL url = new URL(imageUrl);
InputStream is = url.openStream();
OutputStream os = new FileOutputStream(destinationFile);
byte[] b = new byte[2048];
int length;
while ((length = is.read(b)) != -1) {
    os.write(b, 0, length);
}
is.close();
os.close();
    } catch (Exception e) {
        e.printStackTrace();
        
    }
// create a GUI component that loads the image: image.jpg
//
ImageIcon imageIcon = new ImageIcon((new ImageIcon("image.jpg"))
        .getImage().getScaledInstance(500, 500,
                java.awt.Image.SCALE_SMOOTH));


imagine=imageIcon;
jLabel1.setIcon(imageIcon);
} catch (Exception ex) {
            Logger.getLogger(Harta.class.getName()).log(Level.SEVERE, null, ex);
}

    }//GEN-LAST:event_ZoomOutButtonActionPerformed

    private void ZoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomInButtonActionPerformed
       try {                                              
    // TODO add your handling code here:
    Integer i=(Integer.parseInt(zoom));
    i++;
    zoom=String.valueOf(i);
    System.setProperty("java.net.useSystemProxies", "true");
    
    
    
    String latLongs[] = getLatLongPositions(adresa+",Bucuresti");
    
    
    try {
        String latitude = latLongs[0];
        String longitude = latLongs[1];
        String imageUrl = "https://maps.googleapis.com/maps/api/staticmap?markers="
                + latitude
                + ","
                + longitude
                + "&zoom="+zoom+"&size=500x500&scale=2&maptype=roadmap";
        String destinationFile = "image.jpg";
// read the map image from Google
// then save it to a local file: image.jpg
//
URL url = new URL(imageUrl);
InputStream is = url.openStream();
OutputStream os = new FileOutputStream(destinationFile);
byte[] b = new byte[2048];
int length;
while ((length = is.read(b)) != -1) {
    os.write(b, 0, length);
}
is.close();
os.close();
    } catch (IOException e) {
        e.printStackTrace();
        System.exit(1);
    }
// create a GUI component that loads the image: image.jpg
//
ImageIcon imageIcon = new ImageIcon((new ImageIcon("image.jpg"))
        .getImage().getScaledInstance(500, 500,
                java.awt.Image.SCALE_SMOOTH));


imagine=imageIcon;
jLabel1.setIcon(imageIcon);
} catch (Exception ex) {
            Logger.getLogger(Harta.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_ZoomInButtonActionPerformed

    private void SalveazaHartaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalveazaHartaButtonActionPerformed
          // TODO add your handling code here:
        
        try{
            File file = new File("image.jpg");
            
         BufferedImage imagine=ImageIO.read(file);
         ImageIcon image=new ImageIcon(imagine);
         img=imagine;
                }
                  catch(Exception e){
    
}
        this.setVisible(false);
        
        JOptionPane.showMessageDialog(Harta.this,"Harta a fost salvata!!","",JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
        this.removeAll();
        
       
    }//GEN-LAST:event_SalveazaHartaButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Harta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Harta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Harta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Harta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Harta("").setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Harta.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SalveazaHartaButton;
    private javax.swing.JButton ZoomInButton;
    private javax.swing.JButton ZoomOutButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
