/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package login;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.event.DocumentEvent;
import javax.swing.JTextField;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
 import java.util.Scanner;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import static login.CautaOVA.byteArrayToImage;
import static login.CautaOVA.resize;
import login.Login;
import java.sql.Date;
import java.sql.Time;


/**
 *
 * @author Razvan
 */
public class MeniuInserare extends javax.swing.JFrame implements DocumentListener {

    /**
     * Creates new form MeniuInserare
     */
    static int IdClient;
    static String NumeClient;
    static String PrenumeClient;
    static int TelefonClient;
    static String EmailClient;
    static String ObservatiiClient;
    String parametru;//reprezinta numarul de telefon in cazul in care nu exista
    
    public MeniuInserare() {
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(16);
        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
        NumarTextField.getDocument().addDocumentListener(this);
         
        InputMap im = NumarTextField.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
       ListaNumere.setVisible(false);
       jTable1.setVisible(false);
       //jTable2.setVisible(false);
       Text.setVisible(false);
   
         jTable1.addMouseListener(new MouseAdapter() {
     @Override
     public void mousePressed(MouseEvent e) {
       if(e.getClickCount()==2){
           copy();
       }
     }
  });
        
       
       
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void SetListaNumere(String[] es){

        
        ListaNumere.removeAll();
        ListaNumere.setListData(es);
        
    }
    public void copy() {
    int row = jTable1.getSelectedRow();
    //int col = jTable1.getSelectedColumn();
   String s= jTable1.getValueAt(row,0).toString();  //e folosit pentru a lua codul
   String s2=jTable1.getValueAt(row,1).toString();// pentru a selecta tipul 
        int i=Integer.parseInt(s);
        //pentru a lua parametrul 
        if (s2.compareTo("OVA")==0){
        detaliiOVA a;
        a=new detaliiOVA(i);
        a.setVisible(true);
        }
        if (s2.compareTo("OIA")==0){
            detaliiOIA a;
        a=new detaliiOIA(i);
        a.setVisible(true);
        }
        if (s2.compareTo("CCA")==0){
            detaliiCCA a;
        a=new detaliiCCA(i);
        a.setVisible(true);
        }
        if (s2.compareTo("CIA")==0){
            detaliiCIA a;
        a=new detaliiCIA(i);
        a.setVisible(true);
        }
        
        
}
   
    //de revenit
    public void get_alldatecod(){
          java.sql.Statement stmt = null;
        Connection conn=null;
        

        
 try {
        
        Class.forName("com.mysql.jdbc.Driver");

       conn = DriverManager.getConnection( "jdbc:mysql://localhost:3306/imobiliare", "razvan", "razvan");
        System.out.println("db connected");
        stmt = (java.sql.Statement) conn.createStatement();
        ArrayList<ArrayList<Object>> ListaTabelLinii=new ArrayList<ArrayList<Object>>();
        ArrayList<Integer> ListaDeRevenit=new ArrayList<Integer>(); 
        ResultSet rs1;
        boolean logicCerere=false; //ne arata daca mai sunt cereri in sistem
        boolean p=false; //vedem daca sunt cereri sau oferte daca nu exista sa afisam ca nu
        rs1 = stmt.executeQuery("select C1.CCA as Cod,'CCA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Negociabil,ObservatiiPret,TextAnuntIntern,AlteDetalii,Sector,Zona,Metrou,Garsoniera,"
                + "2camere,3camere,4camere,"
                + "4camerep,I,Ip,II,IIp,III,IIIp,Semidecomandat,Decomandat,Circular,"
                    + "Etaj1,Etaj2,Parter,Ultimul,Stare,Nume,Prenume,Telefon  "
                + "from cerereca C1,clienti CL"            
                + " where C1.CCA>=1 and CL.ID=ClientID "
                +"UNION ALL "
        +" select C2.CIA as Cod,'CIA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Negociabil,ObservatiiPret,TextAnuntIntern,AlteDetalii,Sector,Zona,Metrou,Garsoniera,"
                + "2camere,3camere,4camere,"
                + "4camerep,I,Ip,II,IIp,III,IIIp,Semidecomandat,Decomandat,Circular,"
                    + "Etaj1,Etaj2,Parter,Ultimul,Stare,Nume,Prenume,Telefon  "
                + "from cerereia C2,clienti CL"            
                + " where C2.CIA>=1 and CL.ID=ClientID "
                + "order by Data desc");
        
       int count=0;
        while (rs1.next()) {
          logicCerere=true;
        
            ListaTabelLinii.add(new ArrayList<Object>());
             ListaTabelLinii.get(count).add(rs1.getInt("Cod"));
              ListaTabelLinii.get(count).add(rs1.getString("Tip")); //Tip cerere
               ListaTabelLinii.get(count).add(rs1.getString("Nume")+" "+rs1.getString("Prenume")+"|"+rs1.getString("Telefon"));//Client
               ListaTabelLinii.get(count).add(rs1.getString("Stare"));
               ListaTabelLinii.get(count).add(rs1.getInt("Pret"));
               ListaTabelLinii.get(count).add(rs1.getString("Data"));
            p=true;
             count++;
       
            
    }
      
    
        for(int i=0;i<ListaTabelLinii.size();i++){
            System.out.println(ListaTabelLinii.get(i));
        }
        System.out.println(ListaTabelLinii.size());
        
         String[] columnNames = {"Cod","Tip","Client","Stare","Pret","Data"};
       
          Object[][] data =new Object[ListaTabelLinii.size()][6];
          for(int i=0;i<ListaTabelLinii.size();i++){
              for(int j=0;j<6;j++){
                  data[i][j]=ListaTabelLinii.get(i).get(j);
              }
          }
          
           class ClasaTabel extends AbstractTableModel{

              @Override
              public int getRowCount() {
                  return ListaTabelLinii.size();
              }

              @Override
              public int getColumnCount() {
                  return columnNames.length;
              }
              public String getColumnName(int col) {
            return columnNames[col];
            }
              public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
                }

              @Override
              public Object getValueAt(int rowIndex, int columnIndex) {
                 return data[rowIndex][columnIndex];
              }
           
       }
        if (ListaTabelLinii.size()>0){
      
      

       jTable1.setModel(new ClasaTabel());
        //jTable1.setRowHeight(100);
        jTable1.setVisible(true);
        //jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
        jTable1.getColumnModel().getColumn(2).setMinWidth(500);
        
       }
        

        if (logicCerere==true){
            ResultSet rs3;
            ArrayList<ArrayList<Object>> ListaTabelLinii3=new ArrayList<ArrayList<Object>>();
            rs3 = stmt.executeQuery("select C1.CCA as Cod,'CCA' as Tip,Data,ClientID,Pret,"
                    + "Stare,Nume,Prenume,Telefon  "
                + "from cerereca C1,clienti CL "            
                + "where C1.CCA>=1 and CL.ID=ClientID "
                +"UNION ALL "
        +" select C2.CIA as Cod,'CIA' as Tip,Data,ClientID,Pret,"
                    + "Stare,Nume,Prenume,Telefon  "
                + "from cerereia C2,clienti CL"            
                + " where C2.CIA>=1 and CL.ID=ClientID "
                    +"UNION ALL "+
                    "select O1.OVA as Cod,'OVA' as Tip,Data,ClientID,Pret,"
                + "O1.Stare,Nume,Prenume,Telefon  "
                + "from aptvanzare O1,clienti CL"            
                + " where O1.OVA>=1 and CL.ID=ClientID "
                + "UNION ALL "
                + "select O2.OIA as Cod,'OIA' as Tip,Data,ClientID,Pret,"
                + "Stare,Nume,Prenume, Telefon  "
                + "from aptinchiriere O2,clienti CL"            
                + " where O2.OIA>=1 and CL.ID=ClientID "
                + "order by Data desc");
        
       int count3=0;
        while (rs3.next()) {
        
            ListaTabelLinii3.add(new ArrayList<Object>());
             ListaTabelLinii3.get(count3).add(rs3.getInt("Cod"));
              ListaTabelLinii3.get(count3).add(rs3.getString("Tip")); //Tip cerere
               ListaTabelLinii3.get(count3).add(rs3.getString("Nume")+" "+rs3.getString("Prenume")+"|"+rs3.getString("Telefon"));//Client
               ListaTabelLinii3.get(count3).add(rs3.getString("Stare"));
               ListaTabelLinii3.get(count3).add(rs3.getInt("Pret"));
               ListaTabelLinii3.get(count3).add(rs3.getString("Data"));
            p=true;
             count3++;
       
            
    }
      
    
        for(int i=0;i<ListaTabelLinii3.size();i++){
            System.out.println(ListaTabelLinii3.get(i));
        }
        System.out.println(ListaTabelLinii3.size());
        
         String[] columnNames3 = {"Cod","Tip","Client","Stare","Pret","Data"};
       
          Object[][] data3 =new Object[ListaTabelLinii3.size()][6];
          for(int i=0;i<ListaTabelLinii3.size();i++){
              for(int j=0;j<6;j++){
                  data3[i][j]=ListaTabelLinii3.get(i).get(j);
              }
          }
          
           class ClasaTabel3 extends AbstractTableModel{

              @Override
              public int getRowCount() {
                  return ListaTabelLinii3.size();
              }

              @Override
              public int getColumnCount() {
                  return columnNames3.length;
              }
              public String getColumnName(int col) {
            return columnNames3[col];
            }
              public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
                }

              @Override
              public Object getValueAt(int rowIndex, int columnIndex) {
                 return data3[rowIndex][columnIndex];
              }
           
       }
        if (ListaTabelLinii3.size()>0){
      
      

       jTable1.setModel(new ClasaTabel3());
        //jTable1.setRowHeight(100);
        jTable1.setVisible(true);
        //jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
        jTable1.getColumnModel().getColumn(2).setMinWidth(500);
        
       }
            
            
        }else{
            if (logicCerere==false){
                // adaugam oferte daca nu avem cereri
                ArrayList<ArrayList<Object>> ListaTabelLinii2=new ArrayList<ArrayList<Object>>();
        ResultSet rs2;
        rs2 = stmt.executeQuery("select O.OVA as Cod,'OVA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Reper,Camere,Etaj,EtajeTotale,Stare,Status, Nume,Prenume,Telefon,Zona  "
                + "from aptvanzare O,clienti CL"            
                + " where O.OVA>=1 and CL.ID=ClientID "
                + "UNION ALL "
                + "select O.OIA as Cod,'OIA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Reper,Camere,Etaj,EtajeTotale,Stare,Status, Nume,Prenume, Telefon,Zona  "
                + "from aptinchiriere O,clienti CL"            
                + " where O.OIA>=1 and CL.ID=ClientID "
                + "order by Data desc");
        
       int count2=0;
        while (rs2.next()) {
          
            //logicOferta=true;
                ListaTabelLinii2.add(new ArrayList<Object>());
                ListaTabelLinii2.get(count2).add(rs2.getInt("Cod"));
                 ListaTabelLinii2.get(count2).add(rs2.getString("Tip")); //Tip oferta
               ListaTabelLinii2.get(count2).add(rs2.getString("Nume")+" "+rs2.getString("Prenume")+"|"+rs2.getString("Telefon"));//Client
               ListaTabelLinii2.get(count2).add(rs2.getString("Zona"));
               ListaTabelLinii2.get(count2).add(rs2.getString("Camere"));
               ListaTabelLinii2.get(count2).add(rs2.getInt("Etaj")+"/"+rs2.getInt("EtajeTotale"));
               ListaTabelLinii2.get(count2).add(rs2.getString("Stare"));
               ListaTabelLinii2.get(count2).add(rs2.getInt("Pret"));
               
               ListaTabelLinii2.get(count2).add(rs2.getString("Data"));
            p=true;
             count2++;
       
            
    }
         
        for(int i=0;i<ListaTabelLinii2.size();i++){
            System.out.println(ListaTabelLinii2.get(i));
        }
        System.out.println(ListaTabelLinii2.size());
        
         String[] columnNames2 = {"Cod","Tip","Client","Reper","Camere","Etaj","Stare","Pret","Data"};
       
          Object[][] data2 =new Object[ListaTabelLinii2.size()][9];
          for(int i=0;i<ListaTabelLinii2.size();i++){
              for(int j=0;j<9;j++){
                  data2[i][j]=ListaTabelLinii2.get(i).get(j);
              }
          }
          
           class ClasaTabel2 extends AbstractTableModel{

              @Override
              public int getRowCount() {
                  return ListaTabelLinii2.size();
              }

              @Override
              public int getColumnCount() {
                  return columnNames2.length;
              }
              public String getColumnName(int col) {
            return columnNames2[col];
            }
              public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
                }

              @Override
              public Object getValueAt(int rowIndex, int columnIndex) {
                 return data2[rowIndex][columnIndex];
              }
           
       }
        if (ListaTabelLinii2.size()>0){
      
      

       jTable1.setModel(new ClasaTabel2());
        //jTable1.setRowHeight(100);
        jTable1.setVisible(true);
        //jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
        jTable1.getColumnModel().getColumn(2).setMinWidth(500);
        jTable1.getColumnModel().getColumn(8).setMinWidth(150);
        
       }
                
            }
        }
        
        
       
       if (p==false){
            
       
            Text.setVisible(true);
            Text.setText("Nu a fost gasit numarul de telefon <"+NumarTextField.getText()+"> in baza");
            jTable1.setVisible(false);
            //jTable2.setVisible(false);
        }
       conn.close();
       }catch(Exception e){
           e.printStackTrace();
       }
 
 
 
        
    }

    public void get_alldatecod(int nr){
          java.sql.Statement stmt = null;
        Connection conn=null;
        

        
 try {
        
        Class.forName("com.mysql.jdbc.Driver");

       conn = DriverManager.getConnection( "jdbc:mysql://localhost:3306/imobiliare", "razvan", "razvan");
        System.out.println("db connected");
        stmt = (java.sql.Statement) conn.createStatement();
        ArrayList<ArrayList<Object>> ListaTabelLinii=new ArrayList<ArrayList<Object>>();
        ArrayList<Integer> ListaDeRevenit=new ArrayList<Integer>(); 
        ResultSet rs1;
        boolean logicCerere=false; //ne arata daca mai sunt cereri in sistem
        boolean p=false; //vedem daca sunt cereri sau oferte daca nu exista sa afisam ca nu
        rs1 = stmt.executeQuery("select C1.CCA as Cod,'CCA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Negociabil,ObservatiiPret,TextAnuntIntern,AlteDetalii,Sector,Zona,Metrou,Garsoniera,"
                + "2camere,3camere,4camere,"
                + "4camerep,I,Ip,II,IIp,III,IIIp,Semidecomandat,Decomandat,Circular,"
                    + "Etaj1,Etaj2,Parter,Ultimul,Stare,Nume,Prenume,Telefon  "
                + "from cerereca C1,clienti CL"            
                + " where C1.CCA>=1 and CL.ID=ClientID and Telefon="+nr
                +" UNION ALL "
        +" select C2.CIA as Cod,'CIA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Negociabil,ObservatiiPret,TextAnuntIntern,AlteDetalii,Sector,Zona,Metrou,Garsoniera,"
                + "2camere,3camere,4camere,"
                + "4camerep,I,Ip,II,IIp,III,IIIp,Semidecomandat,Decomandat,Circular,"
                    + "Etaj1,Etaj2,Parter,Ultimul,Stare,Nume,Prenume,Telefon  "
                + "from cerereia C2,clienti CL"            
                + " where C2.CIA>=1 and CL.ID=ClientID and Telefon="+nr
                + " order by Data desc");
        
       int count=0;
        while (rs1.next()) {
          logicCerere=true;
        
            ListaTabelLinii.add(new ArrayList<Object>());
             ListaTabelLinii.get(count).add(rs1.getInt("Cod"));
              ListaTabelLinii.get(count).add(rs1.getString("Tip")); //Tip cerere
               ListaTabelLinii.get(count).add(rs1.getString("Nume")+" "+rs1.getString("Prenume")+"|"+rs1.getString("Telefon"));//Client
               ListaTabelLinii.get(count).add(rs1.getString("Stare"));
               ListaTabelLinii.get(count).add(rs1.getInt("Pret"));
               ListaTabelLinii.get(count).add(rs1.getString("Data"));
            p=true;
             count++;
       
            
    }
      
    
        for(int i=0;i<ListaTabelLinii.size();i++){
            System.out.println(ListaTabelLinii.get(i));
        }
        System.out.println(ListaTabelLinii.size());
        
         String[] columnNames = {"Cod","Tip","Client","Stare","Pret","Data"};
       
          Object[][] data =new Object[ListaTabelLinii.size()][6];
          for(int i=0;i<ListaTabelLinii.size();i++){
              for(int j=0;j<6;j++){
                  data[i][j]=ListaTabelLinii.get(i).get(j);
              }
          }
          
           class ClasaTabel extends AbstractTableModel{

              @Override
              public int getRowCount() {
                  return ListaTabelLinii.size();
              }

              @Override
              public int getColumnCount() {
                  return columnNames.length;
              }
              public String getColumnName(int col) {
            return columnNames[col];
            }
              public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
                }

              @Override
              public Object getValueAt(int rowIndex, int columnIndex) {
                 return data[rowIndex][columnIndex];
              }
           
       }
        if (ListaTabelLinii.size()>0){
      
      

       jTable1.setModel(new ClasaTabel());
        //jTable1.setRowHeight(100);
        jTable1.setVisible(true);
        //jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
        jTable1.getColumnModel().getColumn(2).setMinWidth(500);
        
       }
        

        if (logicCerere==true){
            ResultSet rs3;
            ArrayList<ArrayList<Object>> ListaTabelLinii3=new ArrayList<ArrayList<Object>>();
            rs3 = stmt.executeQuery("select C1.CCA as Cod,'CCA' as Tip,Data,ClientID,Pret,"
                    + "Stare,Nume,Prenume,Telefon  "
                + "from cerereca C1,clienti CL "            
                + "where C1.CCA>=1 and CL.ID=ClientID  and Telefon= "+nr
                +" UNION ALL "
        +" select C2.CIA as Cod,'CIA' as Tip,Data,ClientID,Pret,"
                    + "Stare,Nume,Prenume,Telefon  "
                + "from cerereia C2,clienti CL"            
                + " where C2.CIA>=1 and CL.ID=ClientID and Telefon= "+nr
                    +" UNION ALL "+
                    "select O1.OVA as Cod,'OVA' as Tip,Data,ClientID,Pret,"
                + "O1.Stare,Nume,Prenume,Telefon  "
                + "from aptvanzare O1,clienti CL"            
                + " where O1.OVA>=1 and CL.ID=ClientID  and Telefon= "+nr
                + " UNION ALL "
                + "select O2.OIA as Cod,'OIA' as Tip,Data,ClientID,Pret,"
                + "Stare,Nume,Prenume, Telefon  "
                + "from aptinchiriere O2,clienti CL"            
                + " where O2.OIA>=1 and CL.ID=ClientID  and Telefon= "+nr
                + " order by Data desc ");
        
       int count3=0;
        while (rs3.next()) {
        
            ListaTabelLinii3.add(new ArrayList<Object>());
             ListaTabelLinii3.get(count3).add(rs3.getInt("Cod"));
              ListaTabelLinii3.get(count3).add(rs3.getString("Tip")); //Tip cerere
               ListaTabelLinii3.get(count3).add(rs3.getString("Nume")+" "+rs3.getString("Prenume")+"|"+rs3.getString("Telefon"));//Client
               ListaTabelLinii3.get(count3).add(rs3.getString("Stare"));
               ListaTabelLinii3.get(count3).add(rs3.getInt("Pret"));
               ListaTabelLinii3.get(count3).add(rs3.getString("Data"));
            p=true;
             count3++;
       
            
    }
      
    
        for(int i=0;i<ListaTabelLinii3.size();i++){
            System.out.println(ListaTabelLinii3.get(i));
        }
        System.out.println(ListaTabelLinii3.size());
        
         String[] columnNames3 = {"Cod","Tip","Client","Stare","Pret","Data"};
       
          Object[][] data3 =new Object[ListaTabelLinii3.size()][6];
          for(int i=0;i<ListaTabelLinii3.size();i++){
              for(int j=0;j<6;j++){
                  data3[i][j]=ListaTabelLinii3.get(i).get(j);
              }
          }
          
           class ClasaTabel3 extends AbstractTableModel{

              @Override
              public int getRowCount() {
                  return ListaTabelLinii3.size();
              }

              @Override
              public int getColumnCount() {
                  return columnNames3.length;
              }
              public String getColumnName(int col) {
            return columnNames3[col];
            }
              public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
                }

              @Override
              public Object getValueAt(int rowIndex, int columnIndex) {
                 return data3[rowIndex][columnIndex];
              }
           
       }
        if (ListaTabelLinii3.size()>0){
      
      

       jTable1.setModel(new ClasaTabel3());
        //jTable1.setRowHeight(100);
        jTable1.setVisible(true);
        //jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
        jTable1.getColumnModel().getColumn(2).setMinWidth(500);
        
       }
            
            
        }else{
            if (logicCerere==false){
                // adaugam oferte daca nu avem cereri
                ArrayList<ArrayList<Object>> ListaTabelLinii2=new ArrayList<ArrayList<Object>>();
        ResultSet rs2;
        rs2 = stmt.executeQuery("select O.OVA as Cod,'OVA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Reper,Camere,Etaj,EtajeTotale,Stare,Status, Nume,Prenume,Telefon,Zona  "
                + "from aptvanzare O,clienti CL"            
                + " where O.OVA>=1 and CL.ID=ClientID and Telefon="+nr
                + " UNION ALL "
                + "select O.OIA as Cod,'OIA' as Tip,Data,ClientID,Pret,Comision,Exclusivitate,"
                + "Reper,Camere,Etaj,EtajeTotale,Stare,Status, Nume,Prenume, Telefon,Zona  "
                + "from aptinchiriere O,clienti CL"            
                + " where O.OIA>=1 and CL.ID=ClientID and Telefon=" +nr
                + " order by Data desc");
        
       int count2=0;
        while (rs2.next()) {
          
            //logicOferta=true;
                ListaTabelLinii2.add(new ArrayList<Object>());
                ListaTabelLinii2.get(count2).add(rs2.getInt("Cod"));
                 ListaTabelLinii2.get(count2).add(rs2.getString("Tip")); //Tip oferta
               ListaTabelLinii2.get(count2).add(rs2.getString("Nume")+" "+rs2.getString("Prenume")+"|"+rs2.getString("Telefon"));//Client
               ListaTabelLinii2.get(count2).add(rs2.getString("Zona"));
               ListaTabelLinii2.get(count2).add(rs2.getString("Camere"));
               ListaTabelLinii2.get(count2).add(rs2.getInt("Etaj")+"/"+rs2.getInt("EtajeTotale"));
               ListaTabelLinii2.get(count2).add(rs2.getString("Stare"));
               ListaTabelLinii2.get(count2).add(rs2.getInt("Pret"));
               
               ListaTabelLinii2.get(count2).add(rs2.getString("Data"));
            p=true;
             count2++;
       
            
    }
         
        for(int i=0;i<ListaTabelLinii2.size();i++){
            System.out.println(ListaTabelLinii2.get(i));
        }
        System.out.println(ListaTabelLinii2.size());
        
         String[] columnNames2 = {"Cod","Tip","Client","Reper","Camere","Etaj","Stare","Pret","Data"};
       
          Object[][] data2 =new Object[ListaTabelLinii2.size()][9];
          for(int i=0;i<ListaTabelLinii2.size();i++){
              for(int j=0;j<9;j++){
                  data2[i][j]=ListaTabelLinii2.get(i).get(j);
              }
          }
          
           class ClasaTabel2 extends AbstractTableModel{

              @Override
              public int getRowCount() {
                  return ListaTabelLinii2.size();
              }

              @Override
              public int getColumnCount() {
                  return columnNames2.length;
              }
              public String getColumnName(int col) {
            return columnNames2[col];
            }
              public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
                }

              @Override
              public Object getValueAt(int rowIndex, int columnIndex) {
                 return data2[rowIndex][columnIndex];
              }
           
       }
        if (ListaTabelLinii2.size()>0){
      
      

       jTable1.setModel(new ClasaTabel2());
        //jTable1.setRowHeight(100);
        jTable1.setVisible(true);
        //jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
        jTable1.getColumnModel().getColumn(2).setMinWidth(500);
        jTable1.getColumnModel().getColumn(8).setMinWidth(150);
        
       }
                
            }
        }
        
        
       
       if (p==false){
            
           
           
       
            Text.setVisible(true);
            Text.setText("Nu au fost gasite cereri sau oferte pentru numarul de telefon <"+NumarTextField.getText()+"> in baza");
            jTable1.setVisible(false);
            ResultSet rs4;
            boolean existaNumar=false;
            rs4=stmt.executeQuery("select * from clienti where Telefon= "+NumarTextField.getText());
            while(rs4.next()){
                existaNumar=true;
            }
            if (existaNumar==false){
                Text.setText("Nu a fost gasit numarul de telefon <"+NumarTextField.getText()+"> in baza");
            }
            //jTable2.setVisible(false);
        }
       conn.close();
       }catch(Exception e){
           e.printStackTrace();
       }
 
 
 
    }
    
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NumarTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        AdaugaClientButton = new javax.swing.JButton();
        AdaugaOfertaButton = new javax.swing.JButton();
        SelecteazaNumarButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListaNumere = new javax.swing.JList<>();
        Text = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        InserareMeniu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Introducere Oferta");

        NumarTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NumarTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NumarTextFieldFocusLost(evt);
            }
        });
        NumarTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumarTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Cauta Numar Telefon");

        AdaugaClientButton.setText("AdaugaClient");
        AdaugaClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdaugaClientButtonActionPerformed(evt);
            }
        });

        AdaugaOfertaButton.setText("Adauga Cerere/Oferta");
        AdaugaOfertaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdaugaOfertaButtonActionPerformed(evt);
            }
        });

        SelecteazaNumarButton.setText("Selecteaza Numar");
        SelecteazaNumarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelecteazaNumarButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setBorder(null);
        jScrollPane3.setAutoscrolls(true);

        ListaNumere.setBackground(new java.awt.Color(204, 204, 255));
        ListaNumere.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ListaNumere.setForeground(new java.awt.Color(51, 51, 51));
        ListaNumere.setToolTipText("");
        ListaNumere.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ListaNumere.setOpaque(false);
        ListaNumere.setSelectionForeground(new java.awt.Color(51, 51, 51));
        ListaNumere.setVisibleRowCount(2);
        ListaNumere.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListaNumereValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(ListaNumere);

        Text.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Text.setText("sadasdasdasd");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addComponent(NumarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(SelecteazaNumarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 406, Short.MAX_VALUE)
                .addComponent(AdaugaClientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(AdaugaOfertaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(401, 401, 401))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Text, javax.swing.GroupLayout.PREFERRED_SIZE, 951, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(479, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NumarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(AdaugaClientButton)
                    .addComponent(AdaugaOfertaButton)
                    .addComponent(SelecteazaNumarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(Text, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );

        jScrollPane2.setViewportView(jPanel1);

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenuBar1.setMinimumSize(new java.awt.Dimension(106, 26));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(112, 56));

        jMenu1.setText("Cauta Oferta/Cerere");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem3.setText("Oferta Vanzare Apartament");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Oferta Inchiriere Apartament");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Cerere Inchiriere Apartament");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Cerere Cumparare Apartament");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        InserareMeniu.setBackground(new java.awt.Color(153, 153, 153));
        InserareMeniu.setText("Inserare");
        InserareMeniu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        InserareMeniu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                InserareMeniuMenuSelected(evt);
            }
        });
        InserareMeniu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InserareMeniuMouseClicked(evt);
            }
        });
        InserareMeniu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InserareMeniuActionPerformed(evt);
            }
        });
        jMenuBar1.add(InserareMeniu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NumarTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumarTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumarTextFieldActionPerformed

    private void NumarTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NumarTextFieldFocusGained
        
    }//GEN-LAST:event_NumarTextFieldFocusGained

    private void NumarTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NumarTextFieldFocusLost
        // TODO add your handling code here:
       
    }//GEN-LAST:event_NumarTextFieldFocusLost

    private void AdaugaClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdaugaClientButtonActionPerformed
        AdaugaClient a=new AdaugaClient();
        this.setVisible(false);
        a.setVisible(true);
    }//GEN-LAST:event_AdaugaClientButtonActionPerformed

    public String returneazaNumarDinSelectie(){
        if(ListaNumere.isVisible()){
        String ValoareListaNumere[]=new String[ListaNumere.getSelectedValue().length()];
        int index=0;
       index= ListaNumere.getSelectedValue().indexOf("|");
        String numarTelefon=null;
        String NumeNumere[] =new String[ListaNumere.getSelectedValue().length()];
        NumeNumere=ListaNumere.getSelectedValue().split("|",0);
        for(int i=index+1;i<ListaNumere.getSelectedValue().length();i++){
            if(i==(index+1)){
                numarTelefon=NumeNumere[i];
            }
            else{
                numarTelefon=numarTelefon+NumeNumere[i];
            }
        }
        return numarTelefon;
        }
        else
            return null;
    }
    private void SelecteazaNumarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelecteazaNumarButtonActionPerformed
        boolean ok=true;
        boolean flagInt=false;
            if(NumarTextField.getText().isEmpty()){
                
                //this.PretLabel.setForeground(Color.red);
                ok=false;

            }else{
                //System.out.println("da");
                if (NumarTextField.getText().startsWith("0")==false)
                 try{
            Integer.parseInt(NumarTextField.getText());
            }
            catch(NumberFormatException e){
            flagInt=true;
            }
              if(flagInt==true){
            //this.PretLabel.setForeground(Color.red);
            JOptionPane.showMessageDialog(MeniuInserare.this,"Va rugam sa introduceti un numar de telefon valid","Error Message",JOptionPane.ERROR_MESSAGE);
        }
}
            String cod = NumarTextField.getText();

                                        if (flagInt==false){
					if (cod != null && cod.trim().length() > 0) {
                                            if (cod.startsWith("0")==true){
                                                //luam date pentru a le afisa mai departe 
                                                Statement stmt = null;
                try {
        //DriverManager.registerDriver(new com.mysql.jdbc.Driver());
        Class.forName("com.mysql.jdbc.Driver");

       Connection conn = DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/imobiliare", "razvan", "razvan");
       // System.out.println("db connected");
        stmt = (Statement) conn.createStatement();

        ResultSet rs1;
       rs1 = stmt.executeQuery("select ID,Nume,Prenume,Telefon,Email,Observatii from clienti where Telefon="+cod.substring(0, cod.length()));
       while(rs1.next()){
         IdClient=rs1.getInt("ID");
         NumeClient=rs1.getString("Nume");
         PrenumeClient=rs1.getString("Prenume");
         TelefonClient=rs1.getInt("Telefon");
         EmailClient=rs1.getString("Email");
         ObservatiiClient=rs1.getString("Observatii");
           
       }
                }
       catch(Exception e){
               e.printStackTrace();
               }
                                                String aux=cod.substring(1);
                                                System.out.println(cod);
                                                System.out.println(cod.length());
                                                int c=Integer.parseInt(aux);
                                                get_alldatecod(c);
                                            }else{
                                                int c=Integer.parseInt(cod);
                                                get_alldatecod(c);
                                            }
                                                
                                                
					} else {
						get_alldatecod();
					}
                                        }
        
        
        
    }//GEN-LAST:event_SelecteazaNumarButtonActionPerformed

    private void AdaugaOfertaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdaugaOfertaButtonActionPerformed
        if(IdClient==0){
            JOptionPane.showMessageDialog(MeniuInserare.this,"Va rugam alegeti un client valid","Error Message",JOptionPane.ERROR_MESSAGE);
        }
        else{
            Client c=new Client();
            this.setVisible(false);
            c.setVisible(true);
        }
    }//GEN-LAST:event_AdaugaOfertaButtonActionPerformed

    private void ListaNumereValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListaNumereValueChanged
        if (ListaNumere.getSelectedValue()!=null){
            String s=ListaNumere.getSelectedValue();
            String aux="0"+s.substring(s.indexOf('|')+1,s.length());

            NumarTextField.setText(aux);
            
        }
    }//GEN-LAST:event_ListaNumereValueChanged

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        CautaOVA s=new CautaOVA();
        s.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        CautaOIA s=new CautaOIA();
        s.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        CautaCIA s=new CautaCIA();
        s.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        CautaCCA s=new CautaCCA();
        s.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void InserareMeniuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_InserareMeniuMenuSelected
        MeniuInserare dialog = new MeniuInserare();
        this.setVisible(false);
        dialog.setVisible(true);
    }//GEN-LAST:event_InserareMeniuMenuSelected

    private void InserareMeniuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InserareMeniuMouseClicked

    }//GEN-LAST:event_InserareMeniuMouseClicked

    private void InserareMeniuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InserareMeniuActionPerformed
        MeniuInserare dialog = new MeniuInserare();

        // show dialog
        //m.setVisible(false);
        dialog.setVisible(true);
    }//GEN-LAST:event_InserareMeniuActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public String[] returneazaNumar(String text){
        ArrayList<String> Nume=new ArrayList<String>();
        ArrayList<String> Prenume=new ArrayList<String>();
        ArrayList<String> Numere=new ArrayList<String>();
        Statement stmt = null;
                try {
        //DriverManager.registerDriver(new com.mysql.jdbc.Driver());
        Class.forName("com.mysql.jdbc.Driver");

       Connection conn = DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/imobiliare", "razvan", "razvan");
       // System.out.println("db connected");
        stmt = (Statement) conn.createStatement();

        ResultSet rs1;
        String a="";
        if (text.length()>1)
       a=text.substring(1);
        
       rs1 = stmt.executeQuery("select Nume,Prenume,Telefon from clienti where Telefon Like '"+a+"%'");
       while(rs1.next()){
         Nume.add(  rs1.getString("Nume"));
         Prenume.add(  rs1.getString("Prenume"));
         String aux;
        aux= rs1.getString("Telefon");
        Numere.add(aux);
           
        
        
    
       }
       
                }
       catch(Exception e){
                    e.printStackTrace();
                }
                
                String Numere1[]=new String[Nume.size()];
                for(int i=0;i<Nume.size();i++){
                    Numere1[i]=Nume.get(i)+" "+Prenume.get(i)+"|"+Numere.get(i);
                }
                if (Numere1.length>0)
                return Numere1; else 
                    return null;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeniuInserare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeniuInserare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeniuInserare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeniuInserare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MeniuInserare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdaugaClientButton;
    private javax.swing.JButton AdaugaOfertaButton;
    private javax.swing.JMenu InserareMeniu;
    private javax.swing.JList<String> ListaNumere;
    private javax.swing.JTextField NumarTextField;
    private javax.swing.JButton SelecteazaNumarButton;
    private javax.swing.JLabel Text;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void search() {
       // hilit.removeAllHighlights();
         
        String s = NumarTextField.getText();
        
        if(returneazaNumar(s)!=null&&s.length()>7){
            ListaNumere.setVisible(true);
            jScrollPane3.setVisible(true);
            SetListaNumere(returneazaNumar(s));
        }
        else{
            ListaNumere.setVisible(false);
            jScrollPane3.setVisible(false);
        }
        
    }
    @Override
    public void insertUpdate(DocumentEvent de) {
        search();
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
       search();
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        search();
    }
}
